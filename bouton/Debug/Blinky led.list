
Blinky led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017e0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080019b8  080019b8  000119b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019c8  080019c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080019c8  080019c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019c8  080019c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019c8  080019c8  000119c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019cc  080019cc  000119cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080019d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080019dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080019dc  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005655  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000115d  00000000  00000000  00025691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000580  00000000  00000000  000267f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004e8  00000000  00000000  00026d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b253  00000000  00000000  00027258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000061e2  00000000  00000000  000424ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab74c  00000000  00000000  0004868d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3dd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001428  00000000  00000000  000f3e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080019a0 	.word	0x080019a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080019a0 	.word	0x080019a0

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fad2 	bl	80007c6 <HAL_Init>

  /* USER CODE BEGIN Init */
int i=100;
 8000222:	2364      	movs	r3, #100	; 0x64
 8000224:	607b      	str	r3, [r7, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f97d 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 f9c7 	bl	80005bc <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 while (i>0 ,i-- )
 800022e:	e12e      	b.n	800048e <main+0x276>
	 {

	  /* Premier */
	  HAL_GPIO_WritePin (Anode0_GPIO_Port ,Anode0_Pin ,0);
 8000230:	2200      	movs	r2, #0
 8000232:	2110      	movs	r1, #16
 8000234:	48b9      	ldr	r0, [pc, #740]	; (800051c <main+0x304>)
 8000236:	f000 fdbf 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode1_GPIO_Port ,Anode1_Pin ,1);
 800023a:	2201      	movs	r2, #1
 800023c:	2120      	movs	r1, #32
 800023e:	48b7      	ldr	r0, [pc, #732]	; (800051c <main+0x304>)
 8000240:	f000 fdba 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode2_GPIO_Port ,Anode2_Pin ,1);
 8000244:	2201      	movs	r2, #1
 8000246:	f44f 7180 	mov.w	r1, #256	; 0x100
 800024a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024e:	f000 fdb3 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode3_GPIO_Port ,Anode3_Pin ,1);
 8000252:	2201      	movs	r2, #1
 8000254:	2102      	movs	r1, #2
 8000256:	48b2      	ldr	r0, [pc, #712]	; (8000520 <main+0x308>)
 8000258:	f000 fdae 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode4_GPIO_Port ,Anode4_Pin ,1);
 800025c:	2201      	movs	r2, #1
 800025e:	2140      	movs	r1, #64	; 0x40
 8000260:	48ae      	ldr	r0, [pc, #696]	; (800051c <main+0x304>)
 8000262:	f000 fda9 	bl	8000db8 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin (KTD0_GPIO_Port ,KTD0_Pin ,1);
 8000266:	2201      	movs	r2, #1
 8000268:	2180      	movs	r1, #128	; 0x80
 800026a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800026e:	f000 fda3 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD1_GPIO_Port ,KTD1_Pin ,0);
 8000272:	2200      	movs	r2, #0
 8000274:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027c:	f000 fd9c 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD2_GPIO_Port ,KTD2_Pin ,0);
 8000280:	2200      	movs	r2, #0
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000288:	f000 fd96 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD3_GPIO_Port ,KTD3_Pin ,0);
 800028c:	2200      	movs	r2, #0
 800028e:	2180      	movs	r1, #128	; 0x80
 8000290:	48a2      	ldr	r0, [pc, #648]	; (800051c <main+0x304>)
 8000292:	f000 fd91 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD4_GPIO_Port ,KTD4_Pin ,0);
 8000296:	2200      	movs	r2, #0
 8000298:	2104      	movs	r1, #4
 800029a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029e:	f000 fd8b 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_Delay(0);
 80002a2:	2000      	movs	r0, #0
 80002a4:	f000 fb00 	bl	80008a8 <HAL_Delay>

	  /* Deuxième */

	  HAL_GPIO_WritePin (Anode0_GPIO_Port ,Anode0_Pin ,1);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2110      	movs	r1, #16
 80002ac:	489b      	ldr	r0, [pc, #620]	; (800051c <main+0x304>)
 80002ae:	f000 fd83 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode1_GPIO_Port ,Anode1_Pin ,0);
 80002b2:	2200      	movs	r2, #0
 80002b4:	2120      	movs	r1, #32
 80002b6:	4899      	ldr	r0, [pc, #612]	; (800051c <main+0x304>)
 80002b8:	f000 fd7e 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode2_GPIO_Port ,Anode2_Pin ,1);
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c6:	f000 fd77 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode3_GPIO_Port ,Anode3_Pin ,1);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2102      	movs	r1, #2
 80002ce:	4894      	ldr	r0, [pc, #592]	; (8000520 <main+0x308>)
 80002d0:	f000 fd72 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode4_GPIO_Port ,Anode4_Pin ,1);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2140      	movs	r1, #64	; 0x40
 80002d8:	4890      	ldr	r0, [pc, #576]	; (800051c <main+0x304>)
 80002da:	f000 fd6d 	bl	8000db8 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin (KTD0_GPIO_Port ,KTD0_Pin ,0);
 80002de:	2200      	movs	r2, #0
 80002e0:	2180      	movs	r1, #128	; 0x80
 80002e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e6:	f000 fd67 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD1_GPIO_Port ,KTD1_Pin ,1);
 80002ea:	2201      	movs	r2, #1
 80002ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f4:	f000 fd60 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD2_GPIO_Port ,KTD2_Pin ,0);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2140      	movs	r1, #64	; 0x40
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000300:	f000 fd5a 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD3_GPIO_Port ,KTD3_Pin ,0);
 8000304:	2200      	movs	r2, #0
 8000306:	2180      	movs	r1, #128	; 0x80
 8000308:	4884      	ldr	r0, [pc, #528]	; (800051c <main+0x304>)
 800030a:	f000 fd55 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD4_GPIO_Port ,KTD4_Pin ,0);
 800030e:	2200      	movs	r2, #0
 8000310:	2104      	movs	r1, #4
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f000 fd4f 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_Delay(0);
 800031a:	2000      	movs	r0, #0
 800031c:	f000 fac4 	bl	80008a8 <HAL_Delay>

	  /* Troisième */
	  HAL_GPIO_WritePin (Anode0_GPIO_Port ,Anode0_Pin ,1);
 8000320:	2201      	movs	r2, #1
 8000322:	2110      	movs	r1, #16
 8000324:	487d      	ldr	r0, [pc, #500]	; (800051c <main+0x304>)
 8000326:	f000 fd47 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode1_GPIO_Port ,Anode1_Pin ,1);
 800032a:	2201      	movs	r2, #1
 800032c:	2120      	movs	r1, #32
 800032e:	487b      	ldr	r0, [pc, #492]	; (800051c <main+0x304>)
 8000330:	f000 fd42 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode2_GPIO_Port ,Anode2_Pin ,0);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800033a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033e:	f000 fd3b 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode3_GPIO_Port ,Anode3_Pin ,1);
 8000342:	2201      	movs	r2, #1
 8000344:	2102      	movs	r1, #2
 8000346:	4876      	ldr	r0, [pc, #472]	; (8000520 <main+0x308>)
 8000348:	f000 fd36 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode4_GPIO_Port ,Anode4_Pin ,1);
 800034c:	2201      	movs	r2, #1
 800034e:	2140      	movs	r1, #64	; 0x40
 8000350:	4872      	ldr	r0, [pc, #456]	; (800051c <main+0x304>)
 8000352:	f000 fd31 	bl	8000db8 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin (KTD0_GPIO_Port ,KTD0_Pin ,0);
 8000356:	2200      	movs	r2, #0
 8000358:	2180      	movs	r1, #128	; 0x80
 800035a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035e:	f000 fd2b 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD1_GPIO_Port ,KTD1_Pin ,0);
 8000362:	2200      	movs	r2, #0
 8000364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036c:	f000 fd24 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD2_GPIO_Port ,KTD2_Pin ,1);
 8000370:	2201      	movs	r2, #1
 8000372:	2140      	movs	r1, #64	; 0x40
 8000374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000378:	f000 fd1e 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD3_GPIO_Port ,KTD3_Pin ,0);
 800037c:	2200      	movs	r2, #0
 800037e:	2180      	movs	r1, #128	; 0x80
 8000380:	4866      	ldr	r0, [pc, #408]	; (800051c <main+0x304>)
 8000382:	f000 fd19 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD4_GPIO_Port ,KTD4_Pin ,0);
 8000386:	2200      	movs	r2, #0
 8000388:	2104      	movs	r1, #4
 800038a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038e:	f000 fd13 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_Delay(0);
 8000392:	2000      	movs	r0, #0
 8000394:	f000 fa88 	bl	80008a8 <HAL_Delay>

	  /* Quatrième */
	  HAL_GPIO_WritePin (Anode0_GPIO_Port ,Anode0_Pin ,1);
 8000398:	2201      	movs	r2, #1
 800039a:	2110      	movs	r1, #16
 800039c:	485f      	ldr	r0, [pc, #380]	; (800051c <main+0x304>)
 800039e:	f000 fd0b 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode1_GPIO_Port ,Anode1_Pin ,1);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2120      	movs	r1, #32
 80003a6:	485d      	ldr	r0, [pc, #372]	; (800051c <main+0x304>)
 80003a8:	f000 fd06 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode2_GPIO_Port ,Anode2_Pin ,1);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b6:	f000 fcff 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode3_GPIO_Port ,Anode3_Pin ,0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2102      	movs	r1, #2
 80003be:	4858      	ldr	r0, [pc, #352]	; (8000520 <main+0x308>)
 80003c0:	f000 fcfa 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode4_GPIO_Port ,Anode4_Pin ,1);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2140      	movs	r1, #64	; 0x40
 80003c8:	4854      	ldr	r0, [pc, #336]	; (800051c <main+0x304>)
 80003ca:	f000 fcf5 	bl	8000db8 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin (KTD0_GPIO_Port ,KTD0_Pin ,0);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2180      	movs	r1, #128	; 0x80
 80003d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d6:	f000 fcef 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD1_GPIO_Port ,KTD1_Pin ,0);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e4:	f000 fce8 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD2_GPIO_Port ,KTD2_Pin ,0);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2140      	movs	r1, #64	; 0x40
 80003ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f0:	f000 fce2 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD3_GPIO_Port ,KTD3_Pin ,1);
 80003f4:	2201      	movs	r2, #1
 80003f6:	2180      	movs	r1, #128	; 0x80
 80003f8:	4848      	ldr	r0, [pc, #288]	; (800051c <main+0x304>)
 80003fa:	f000 fcdd 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD4_GPIO_Port ,KTD4_Pin ,0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2104      	movs	r1, #4
 8000402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000406:	f000 fcd7 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_Delay(0);
 800040a:	2000      	movs	r0, #0
 800040c:	f000 fa4c 	bl	80008a8 <HAL_Delay>

	  /* Cinquième */
	  HAL_GPIO_WritePin (Anode0_GPIO_Port ,Anode0_Pin ,1);
 8000410:	2201      	movs	r2, #1
 8000412:	2110      	movs	r1, #16
 8000414:	4841      	ldr	r0, [pc, #260]	; (800051c <main+0x304>)
 8000416:	f000 fccf 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode1_GPIO_Port ,Anode1_Pin ,1);
 800041a:	2201      	movs	r2, #1
 800041c:	2120      	movs	r1, #32
 800041e:	483f      	ldr	r0, [pc, #252]	; (800051c <main+0x304>)
 8000420:	f000 fcca 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode2_GPIO_Port ,Anode2_Pin ,1);
 8000424:	2201      	movs	r2, #1
 8000426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800042a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042e:	f000 fcc3 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode3_GPIO_Port ,Anode3_Pin ,1);
 8000432:	2201      	movs	r2, #1
 8000434:	2102      	movs	r1, #2
 8000436:	483a      	ldr	r0, [pc, #232]	; (8000520 <main+0x308>)
 8000438:	f000 fcbe 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode4_GPIO_Port ,Anode4_Pin ,0);
 800043c:	2200      	movs	r2, #0
 800043e:	2140      	movs	r1, #64	; 0x40
 8000440:	4836      	ldr	r0, [pc, #216]	; (800051c <main+0x304>)
 8000442:	f000 fcb9 	bl	8000db8 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin (KTD0_GPIO_Port ,KTD0_Pin ,0);
 8000446:	2200      	movs	r2, #0
 8000448:	2180      	movs	r1, #128	; 0x80
 800044a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044e:	f000 fcb3 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD1_GPIO_Port ,KTD1_Pin ,0);
 8000452:	2200      	movs	r2, #0
 8000454:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045c:	f000 fcac 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD2_GPIO_Port ,KTD2_Pin ,0);
 8000460:	2200      	movs	r2, #0
 8000462:	2140      	movs	r1, #64	; 0x40
 8000464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000468:	f000 fca6 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD3_GPIO_Port ,KTD3_Pin ,0);
 800046c:	2200      	movs	r2, #0
 800046e:	2180      	movs	r1, #128	; 0x80
 8000470:	482a      	ldr	r0, [pc, #168]	; (800051c <main+0x304>)
 8000472:	f000 fca1 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD4_GPIO_Port ,KTD4_Pin ,1);
 8000476:	2201      	movs	r2, #1
 8000478:	2104      	movs	r1, #4
 800047a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047e:	f000 fc9b 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_Delay(0);
 8000482:	2000      	movs	r0, #0
 8000484:	f000 fa10 	bl	80008a8 <HAL_Delay>

	  HAL_Delay(5);
 8000488:	2005      	movs	r0, #5
 800048a:	f000 fa0d 	bl	80008a8 <HAL_Delay>
	 while (i>0 ,i-- )
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	1e5a      	subs	r2, r3, #1
 8000492:	607a      	str	r2, [r7, #4]
 8000494:	2b00      	cmp	r3, #0
 8000496:	f47f aecb 	bne.w	8000230 <main+0x18>
	 }
	  HAL_GPIO_WritePin (Anode0_GPIO_Port ,Anode0_Pin ,1);
 800049a:	2201      	movs	r2, #1
 800049c:	2110      	movs	r1, #16
 800049e:	481f      	ldr	r0, [pc, #124]	; (800051c <main+0x304>)
 80004a0:	f000 fc8a 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode1_GPIO_Port ,Anode1_Pin ,1);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2120      	movs	r1, #32
 80004a8:	481c      	ldr	r0, [pc, #112]	; (800051c <main+0x304>)
 80004aa:	f000 fc85 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode2_GPIO_Port ,Anode2_Pin ,1);
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b8:	f000 fc7e 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode3_GPIO_Port ,Anode3_Pin ,1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2102      	movs	r1, #2
 80004c0:	4817      	ldr	r0, [pc, #92]	; (8000520 <main+0x308>)
 80004c2:	f000 fc79 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (Anode4_GPIO_Port ,Anode4_Pin ,1);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2140      	movs	r1, #64	; 0x40
 80004ca:	4814      	ldr	r0, [pc, #80]	; (800051c <main+0x304>)
 80004cc:	f000 fc74 	bl	8000db8 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin (KTD0_GPIO_Port ,KTD0_Pin ,0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d8:	f000 fc6e 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD1_GPIO_Port ,KTD1_Pin ,0);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e6:	f000 fc67 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD2_GPIO_Port ,KTD2_Pin ,0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2140      	movs	r1, #64	; 0x40
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f2:	f000 fc61 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD3_GPIO_Port ,KTD3_Pin ,0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	4808      	ldr	r0, [pc, #32]	; (800051c <main+0x304>)
 80004fc:	f000 fc5c 	bl	8000db8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (KTD4_GPIO_Port ,KTD4_Pin ,0);
 8000500:	2200      	movs	r2, #0
 8000502:	2104      	movs	r1, #4
 8000504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000508:	f000 fc56 	bl	8000db8 <HAL_GPIO_WritePin>
	 i=100;
 800050c:	2364      	movs	r3, #100	; 0x64
 800050e:	607b      	str	r3, [r7, #4]
	HAL_Delay(500);
 8000510:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000514:	f000 f9c8 	bl	80008a8 <HAL_Delay>
	 while (i>0 ,i-- )
 8000518:	e7b9      	b.n	800048e <main+0x276>
 800051a:	bf00      	nop
 800051c:	48000400 	.word	0x48000400
 8000520:	48001400 	.word	0x48001400

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0318 	add.w	r3, r7, #24
 800052e:	2238      	movs	r2, #56	; 0x38
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f001 fa2c 	bl	8001990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000546:	2000      	movs	r0, #0
 8000548:	f000 fc4e 	bl	8000de8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054c:	2302      	movs	r3, #2
 800054e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000556:	2340      	movs	r3, #64	; 0x40
 8000558:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055e:	2302      	movs	r3, #2
 8000560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000562:	2304      	movs	r3, #4
 8000564:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000566:	2355      	movs	r3, #85	; 0x55
 8000568:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056a:	2302      	movs	r3, #2
 800056c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800056e:	2302      	movs	r3, #2
 8000570:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0318 	add.w	r3, r7, #24
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fce8 	bl	8000f50 <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000586:	f000 f88f 	bl	80006a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2303      	movs	r3, #3
 8000590:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2104      	movs	r1, #4
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 ffec 	bl	8001580 <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ae:	f000 f87b 	bl	80006a8 <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3750      	adds	r7, #80	; 0x50
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d2:	4b32      	ldr	r3, [pc, #200]	; (800069c <MX_GPIO_Init+0xe0>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a31      	ldr	r2, [pc, #196]	; (800069c <MX_GPIO_Init+0xe0>)
 80005d8:	f043 0320 	orr.w	r3, r3, #32
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b2f      	ldr	r3, [pc, #188]	; (800069c <MX_GPIO_Init+0xe0>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0320 	and.w	r3, r3, #32
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <MX_GPIO_Init+0xe0>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a2b      	ldr	r2, [pc, #172]	; (800069c <MX_GPIO_Init+0xe0>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b29      	ldr	r3, [pc, #164]	; (800069c <MX_GPIO_Init+0xe0>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	4b26      	ldr	r3, [pc, #152]	; (800069c <MX_GPIO_Init+0xe0>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a25      	ldr	r2, [pc, #148]	; (800069c <MX_GPIO_Init+0xe0>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <MX_GPIO_Init+0xe0>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Anode3_GPIO_Port, Anode3_Pin, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2102      	movs	r1, #2
 800061e:	4820      	ldr	r0, [pc, #128]	; (80006a0 <MX_GPIO_Init+0xe4>)
 8000620:	f000 fbca 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, KTD4_Pin|KTD2_Pin|KTD0_Pin|Anode2_Pin
 8000624:	2200      	movs	r2, #0
 8000626:	f248 51c4 	movw	r1, #34244	; 0x85c4
 800062a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062e:	f000 fbc3 	bl	8000db8 <HAL_GPIO_WritePin>
                          |Comm0_Pin|KTD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Anode0_Pin|Anode1_Pin|Anode4_Pin|KTD3_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	21f0      	movs	r1, #240	; 0xf0
 8000636:	481b      	ldr	r0, [pc, #108]	; (80006a4 <MX_GPIO_Init+0xe8>)
 8000638:	f000 fbbe 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Anode3_Pin */
  GPIO_InitStruct.Pin = Anode3_Pin;
 800063c:	2302      	movs	r3, #2
 800063e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Anode3_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4619      	mov	r1, r3
 8000652:	4813      	ldr	r0, [pc, #76]	; (80006a0 <MX_GPIO_Init+0xe4>)
 8000654:	f000 fa2e 	bl	8000ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KTD4_Pin KTD2_Pin KTD0_Pin Anode2_Pin
                           Comm0_Pin KTD1_Pin */
  GPIO_InitStruct.Pin = KTD4_Pin|KTD2_Pin|KTD0_Pin|Anode2_Pin
 8000658:	f248 53c4 	movw	r3, #34244	; 0x85c4
 800065c:	60fb      	str	r3, [r7, #12]
                          |Comm0_Pin|KTD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	4619      	mov	r1, r3
 8000670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000674:	f000 fa1e 	bl	8000ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Anode0_Pin Anode1_Pin Anode4_Pin KTD3_Pin */
  GPIO_InitStruct.Pin = Anode0_Pin|Anode1_Pin|Anode4_Pin|KTD3_Pin;
 8000678:	23f0      	movs	r3, #240	; 0xf0
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4619      	mov	r1, r3
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_GPIO_Init+0xe8>)
 8000690:	f000 fa10 	bl	8000ab4 <HAL_GPIO_Init>

}
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	48001400 	.word	0x48001400
 80006a4:	48000400 	.word	0x48000400

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_MspInit+0x44>)
 80006bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <HAL_MspInit+0x44>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6613      	str	r3, [r2, #96]	; 0x60
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <HAL_MspInit+0x44>)
 80006c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_MspInit+0x44>)
 80006d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <HAL_MspInit+0x44>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	6593      	str	r3, [r2, #88]	; 0x58
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_MspInit+0x44>)
 80006e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006ea:	f000 fc21 	bl	8000f30 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <NMI_Handler+0x4>

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <MemManage_Handler+0x4>

0800070e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <UsageFault_Handler+0x4>

0800071a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000748:	f000 f890 	bl	800086c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <SystemInit+0x20>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <SystemInit+0x20>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000776:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077a:	490e      	ldr	r1, [pc, #56]	; (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800077c:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <LoopForever+0xe>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000780:	e002      	b.n	8000788 <LoopCopyDataInit>

08000782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000786:	3304      	adds	r3, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800078c:	d3f9      	bcc.n	8000782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000790:	4c0b      	ldr	r4, [pc, #44]	; (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000794:	e001      	b.n	800079a <LoopFillZerobss>

08000796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000798:	3204      	adds	r2, #4

0800079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800079c:	d3fb      	bcc.n	8000796 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800079e:	f7ff ffd7 	bl	8000750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007a2:	f001 f8d1 	bl	8001948 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007a6:	f7ff fd37 	bl	8000218 <main>

080007aa <LoopForever>:

LoopForever:
    b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   r0, =_estack
 80007ac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007b8:	080019d0 	.word	0x080019d0
  ldr r2, =_sbss
 80007bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007c0:	2000002c 	.word	0x2000002c

080007c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_2_IRQHandler>

080007c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007cc:	2300      	movs	r3, #0
 80007ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f93d 	bl	8000a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 f80e 	bl	80007f8 <HAL_InitTick>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	71fb      	strb	r3, [r7, #7]
 80007e6:	e001      	b.n	80007ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007e8:	f7ff ff64 	bl	80006b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007ec:	79fb      	ldrb	r3, [r7, #7]

}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000800:	2300      	movs	r3, #0
 8000802:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_InitTick+0x68>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d022      	beq.n	8000852 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_InitTick+0x6c>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <HAL_InitTick+0x68>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000818:	fbb1 f3f3 	udiv	r3, r1, r3
 800081c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f93a 	bl	8000a9a <HAL_SYSTICK_Config>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d10f      	bne.n	800084c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b0f      	cmp	r3, #15
 8000830:	d809      	bhi.n	8000846 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000832:	2200      	movs	r2, #0
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	f04f 30ff 	mov.w	r0, #4294967295
 800083a:	f000 f914 	bl	8000a66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <HAL_InitTick+0x70>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	e007      	b.n	8000856 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	73fb      	strb	r3, [r7, #15]
 800084a:	e004      	b.n	8000856 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	73fb      	strb	r3, [r7, #15]
 8000850:	e001      	b.n	8000856 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000856:	7bfb      	ldrb	r3, [r7, #15]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000008 	.word	0x20000008
 8000864:	20000000 	.word	0x20000000
 8000868:	20000004 	.word	0x20000004

0800086c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x1c>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x20>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4413      	add	r3, r2
 800087a:	4a03      	ldr	r2, [pc, #12]	; (8000888 <HAL_IncTick+0x1c>)
 800087c:	6013      	str	r3, [r2, #0]
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	20000028 	.word	0x20000028
 800088c:	20000008 	.word	0x20000008

08000890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_GetTick+0x14>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000028 	.word	0x20000028

080008a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b0:	f7ff ffee 	bl	8000890 <HAL_GetTick>
 80008b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c0:	d004      	beq.n	80008cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_Delay+0x40>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	4413      	add	r3, r2
 80008ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008cc:	bf00      	nop
 80008ce:	f7ff ffdf 	bl	8000890 <HAL_GetTick>
 80008d2:	4602      	mov	r2, r0
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d8f7      	bhi.n	80008ce <HAL_Delay+0x26>
  {
  }
}
 80008de:	bf00      	nop
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000008 	.word	0x20000008

080008ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	60d3      	str	r3, [r2, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <__NVIC_GetPriorityGrouping+0x18>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	f003 0307 	and.w	r3, r3, #7
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db0a      	blt.n	800097a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	490c      	ldr	r1, [pc, #48]	; (800099c <__NVIC_SetPriority+0x4c>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	0112      	lsls	r2, r2, #4
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	440b      	add	r3, r1
 8000974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000978:	e00a      	b.n	8000990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <__NVIC_SetPriority+0x50>)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	3b04      	subs	r3, #4
 8000988:	0112      	lsls	r2, r2, #4
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	440b      	add	r3, r1
 800098e:	761a      	strb	r2, [r3, #24]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f1c3 0307 	rsb	r3, r3, #7
 80009be:	2b04      	cmp	r3, #4
 80009c0:	bf28      	it	cs
 80009c2:	2304      	movcs	r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3304      	adds	r3, #4
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d902      	bls.n	80009d4 <NVIC_EncodePriority+0x30>
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3b03      	subs	r3, #3
 80009d2:	e000      	b.n	80009d6 <NVIC_EncodePriority+0x32>
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43da      	mvns	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	401a      	ands	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43d9      	mvns	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	4313      	orrs	r3, r2
         );
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a1c:	d301      	bcc.n	8000a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00f      	b.n	8000a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <SysTick_Config+0x40>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f7ff ff8e 	bl	8000950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <SysTick_Config+0x40>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SysTick_Config+0x40>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff47 	bl	80008ec <__NVIC_SetPriorityGrouping>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a74:	f7ff ff5e 	bl	8000934 <__NVIC_GetPriorityGrouping>
 8000a78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	68b9      	ldr	r1, [r7, #8]
 8000a7e:	6978      	ldr	r0, [r7, #20]
 8000a80:	f7ff ff90 	bl	80009a4 <NVIC_EncodePriority>
 8000a84:	4602      	mov	r2, r0
 8000a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff5f 	bl	8000950 <__NVIC_SetPriority>
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffb2 	bl	8000a0c <SysTick_Config>
 8000aa8:	4603      	mov	r3, r0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b087      	sub	sp, #28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ac2:	e15a      	b.n	8000d7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 814c 	beq.w	8000d74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d00b      	beq.n	8000afc <HAL_GPIO_Init+0x48>
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d007      	beq.n	8000afc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af0:	2b11      	cmp	r3, #17
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	2b12      	cmp	r3, #18
 8000afa:	d130      	bne.n	8000b5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	2203      	movs	r2, #3
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68da      	ldr	r2, [r3, #12]
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b32:	2201      	movs	r2, #1
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	091b      	lsrs	r3, r3, #4
 8000b48:	f003 0201 	and.w	r2, r3, #1
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_Init+0xea>
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2b12      	cmp	r3, #18
 8000b9c:	d123      	bne.n	8000be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	08da      	lsrs	r2, r3, #3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3208      	adds	r2, #8
 8000ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	220f      	movs	r2, #15
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	691a      	ldr	r2, [r3, #16]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	08da      	lsrs	r2, r3, #3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3208      	adds	r2, #8
 8000be0:	6939      	ldr	r1, [r7, #16]
 8000be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 0203 	and.w	r2, r3, #3
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 80a6 	beq.w	8000d74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c28:	4b5b      	ldr	r3, [pc, #364]	; (8000d98 <HAL_GPIO_Init+0x2e4>)
 8000c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2c:	4a5a      	ldr	r2, [pc, #360]	; (8000d98 <HAL_GPIO_Init+0x2e4>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6613      	str	r3, [r2, #96]	; 0x60
 8000c34:	4b58      	ldr	r3, [pc, #352]	; (8000d98 <HAL_GPIO_Init+0x2e4>)
 8000c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c40:	4a56      	ldr	r2, [pc, #344]	; (8000d9c <HAL_GPIO_Init+0x2e8>)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	089b      	lsrs	r3, r3, #2
 8000c46:	3302      	adds	r3, #2
 8000c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	220f      	movs	r2, #15
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c6a:	d01f      	beq.n	8000cac <HAL_GPIO_Init+0x1f8>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a4c      	ldr	r2, [pc, #304]	; (8000da0 <HAL_GPIO_Init+0x2ec>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d019      	beq.n	8000ca8 <HAL_GPIO_Init+0x1f4>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a4b      	ldr	r2, [pc, #300]	; (8000da4 <HAL_GPIO_Init+0x2f0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d013      	beq.n	8000ca4 <HAL_GPIO_Init+0x1f0>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a4a      	ldr	r2, [pc, #296]	; (8000da8 <HAL_GPIO_Init+0x2f4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d00d      	beq.n	8000ca0 <HAL_GPIO_Init+0x1ec>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a49      	ldr	r2, [pc, #292]	; (8000dac <HAL_GPIO_Init+0x2f8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d007      	beq.n	8000c9c <HAL_GPIO_Init+0x1e8>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a48      	ldr	r2, [pc, #288]	; (8000db0 <HAL_GPIO_Init+0x2fc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d101      	bne.n	8000c98 <HAL_GPIO_Init+0x1e4>
 8000c94:	2305      	movs	r3, #5
 8000c96:	e00a      	b.n	8000cae <HAL_GPIO_Init+0x1fa>
 8000c98:	2306      	movs	r3, #6
 8000c9a:	e008      	b.n	8000cae <HAL_GPIO_Init+0x1fa>
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	e006      	b.n	8000cae <HAL_GPIO_Init+0x1fa>
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e004      	b.n	8000cae <HAL_GPIO_Init+0x1fa>
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	e002      	b.n	8000cae <HAL_GPIO_Init+0x1fa>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e000      	b.n	8000cae <HAL_GPIO_Init+0x1fa>
 8000cac:	2300      	movs	r3, #0
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	f002 0203 	and.w	r2, r2, #3
 8000cb4:	0092      	lsls	r2, r2, #2
 8000cb6:	4093      	lsls	r3, r2
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cbe:	4937      	ldr	r1, [pc, #220]	; (8000d9c <HAL_GPIO_Init+0x2e8>)
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	3302      	adds	r3, #2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ccc:	4b39      	ldr	r3, [pc, #228]	; (8000db4 <HAL_GPIO_Init+0x300>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cf0:	4a30      	ldr	r2, [pc, #192]	; (8000db4 <HAL_GPIO_Init+0x300>)
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <HAL_GPIO_Init+0x300>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d1a:	4a26      	ldr	r2, [pc, #152]	; (8000db4 <HAL_GPIO_Init+0x300>)
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <HAL_GPIO_Init+0x300>)
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d44:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <HAL_GPIO_Init+0x300>)
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <HAL_GPIO_Init+0x300>)
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d6e:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <HAL_GPIO_Init+0x300>)
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3301      	adds	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	fa22 f303 	lsr.w	r3, r2, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f47f ae9d 	bne.w	8000ac4 <HAL_GPIO_Init+0x10>
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	bf00      	nop
 8000d8e:	371c      	adds	r7, #28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	48000400 	.word	0x48000400
 8000da4:	48000800 	.word	0x48000800
 8000da8:	48000c00 	.word	0x48000c00
 8000dac:	48001000 	.word	0x48001000
 8000db0:	48001400 	.word	0x48001400
 8000db4:	40010400 	.word	0x40010400

08000db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dc8:	787b      	ldrb	r3, [r7, #1]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dd4:	e002      	b.n	8000ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dd6:	887a      	ldrh	r2, [r7, #2]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d141      	bne.n	8000e7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000df6:	4b4b      	ldr	r3, [pc, #300]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e02:	d131      	bne.n	8000e68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e04:	4b47      	ldr	r3, [pc, #284]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e0a:	4a46      	ldr	r2, [pc, #280]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e14:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e1c:	4a41      	ldr	r2, [pc, #260]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e24:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2232      	movs	r2, #50	; 0x32
 8000e2a:	fb02 f303 	mul.w	r3, r2, r3
 8000e2e:	4a3f      	ldr	r2, [pc, #252]	; (8000f2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e30:	fba2 2303 	umull	r2, r3, r2, r3
 8000e34:	0c9b      	lsrs	r3, r3, #18
 8000e36:	3301      	adds	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e3a:	e002      	b.n	8000e42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e42:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e4e:	d102      	bne.n	8000e56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f2      	bne.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e56:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e62:	d158      	bne.n	8000f16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e057      	b.n	8000f18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e68:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e6e:	4a2d      	ldr	r2, [pc, #180]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e78:	e04d      	b.n	8000f16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e80:	d141      	bne.n	8000f06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e8e:	d131      	bne.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e96:	4a23      	ldr	r2, [pc, #140]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea0:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ea8:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2232      	movs	r2, #50	; 0x32
 8000eb6:	fb02 f303 	mul.w	r3, r2, r3
 8000eba:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec0:	0c9b      	lsrs	r3, r3, #18
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec6:	e002      	b.n	8000ece <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eda:	d102      	bne.n	8000ee2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f2      	bne.n	8000ec8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eee:	d112      	bne.n	8000f16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e011      	b.n	8000f18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f04:	e007      	b.n	8000f16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	40007000 	.word	0x40007000
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	431bde83 	.word	0x431bde83

08000f30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3e:	6093      	str	r3, [r2, #8]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40007000 	.word	0x40007000

08000f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e308      	b.n	8001574 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d075      	beq.n	800105a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f6e:	4ba3      	ldr	r3, [pc, #652]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f78:	4ba0      	ldr	r3, [pc, #640]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2b0c      	cmp	r3, #12
 8000f86:	d102      	bne.n	8000f8e <HAL_RCC_OscConfig+0x3e>
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d002      	beq.n	8000f94 <HAL_RCC_OscConfig+0x44>
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d10b      	bne.n	8000fac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f94:	4b99      	ldr	r3, [pc, #612]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d05b      	beq.n	8001058 <HAL_RCC_OscConfig+0x108>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d157      	bne.n	8001058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e2e3      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb4:	d106      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x74>
 8000fb6:	4b91      	ldr	r3, [pc, #580]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a90      	ldr	r2, [pc, #576]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e01d      	b.n	8001000 <HAL_RCC_OscConfig+0xb0>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x98>
 8000fce:	4b8b      	ldr	r3, [pc, #556]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a8a      	ldr	r2, [pc, #552]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8000fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b88      	ldr	r3, [pc, #544]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a87      	ldr	r2, [pc, #540]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8000fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e00b      	b.n	8001000 <HAL_RCC_OscConfig+0xb0>
 8000fe8:	4b84      	ldr	r3, [pc, #528]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a83      	ldr	r2, [pc, #524]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8000fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b81      	ldr	r3, [pc, #516]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a80      	ldr	r2, [pc, #512]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8000ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001008:	f7ff fc42 	bl	8000890 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fc3e 	bl	8000890 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b64      	cmp	r3, #100	; 0x64
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e2a8      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001022:	4b76      	ldr	r3, [pc, #472]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f0      	beq.n	8001010 <HAL_RCC_OscConfig+0xc0>
 800102e:	e014      	b.n	800105a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001030:	f7ff fc2e 	bl	8000890 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001038:	f7ff fc2a 	bl	8000890 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b64      	cmp	r3, #100	; 0x64
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e294      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800104a:	4b6c      	ldr	r3, [pc, #432]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_OscConfig+0xe8>
 8001056:	e000      	b.n	800105a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d075      	beq.n	8001152 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001066:	4b65      	ldr	r3, [pc, #404]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 030c 	and.w	r3, r3, #12
 800106e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001070:	4b62      	ldr	r3, [pc, #392]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	2b0c      	cmp	r3, #12
 800107e:	d102      	bne.n	8001086 <HAL_RCC_OscConfig+0x136>
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d002      	beq.n	800108c <HAL_RCC_OscConfig+0x13c>
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	2b04      	cmp	r3, #4
 800108a:	d11f      	bne.n	80010cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800108c:	4b5b      	ldr	r3, [pc, #364]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <HAL_RCC_OscConfig+0x154>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e267      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a4:	4b55      	ldr	r3, [pc, #340]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	061b      	lsls	r3, r3, #24
 80010b2:	4952      	ldr	r1, [pc, #328]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010b8:	4b51      	ldr	r3, [pc, #324]	; (8001200 <HAL_RCC_OscConfig+0x2b0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fb9b 	bl	80007f8 <HAL_InitTick>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d043      	beq.n	8001150 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e253      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d023      	beq.n	800111c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d4:	4b49      	ldr	r3, [pc, #292]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a48      	ldr	r2, [pc, #288]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e0:	f7ff fbd6 	bl	8000890 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e8:	f7ff fbd2 	bl	8000890 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e23c      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010fa:	4b40      	ldr	r3, [pc, #256]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f0      	beq.n	80010e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001106:	4b3d      	ldr	r3, [pc, #244]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	061b      	lsls	r3, r3, #24
 8001114:	4939      	ldr	r1, [pc, #228]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8001116:	4313      	orrs	r3, r2
 8001118:	604b      	str	r3, [r1, #4]
 800111a:	e01a      	b.n	8001152 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800111c:	4b37      	ldr	r3, [pc, #220]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a36      	ldr	r2, [pc, #216]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8001122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001128:	f7ff fbb2 	bl	8000890 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001130:	f7ff fbae 	bl	8000890 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e218      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001142:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f0      	bne.n	8001130 <HAL_RCC_OscConfig+0x1e0>
 800114e:	e000      	b.n	8001152 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001150:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d03c      	beq.n	80011d8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d01c      	beq.n	80011a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8001168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800116c:	4a23      	ldr	r2, [pc, #140]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001176:	f7ff fb8b 	bl	8000890 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117e:	f7ff fb87 	bl	8000890 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e1f1      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 8001192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0ef      	beq.n	800117e <HAL_RCC_OscConfig+0x22e>
 800119e:	e01b      	b.n	80011d8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 80011a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011a6:	4a15      	ldr	r2, [pc, #84]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b0:	f7ff fb6e 	bl	8000890 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b8:	f7ff fb6a 	bl	8000890 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e1d4      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1ef      	bne.n	80011b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80ab 	beq.w	800133c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d106      	bne.n	8001204 <HAL_RCC_OscConfig+0x2b4>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e005      	b.n	8001206 <HAL_RCC_OscConfig+0x2b6>
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	20000004 	.word	0x20000004
 8001204:	2300      	movs	r3, #0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00d      	beq.n	8001226 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	4baf      	ldr	r3, [pc, #700]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120e:	4aae      	ldr	r2, [pc, #696]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001214:	6593      	str	r3, [r2, #88]	; 0x58
 8001216:	4bac      	ldr	r3, [pc, #688]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001222:	2301      	movs	r3, #1
 8001224:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001226:	4ba9      	ldr	r3, [pc, #676]	; (80014cc <HAL_RCC_OscConfig+0x57c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122e:	2b00      	cmp	r3, #0
 8001230:	d118      	bne.n	8001264 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001232:	4ba6      	ldr	r3, [pc, #664]	; (80014cc <HAL_RCC_OscConfig+0x57c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4aa5      	ldr	r2, [pc, #660]	; (80014cc <HAL_RCC_OscConfig+0x57c>)
 8001238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123e:	f7ff fb27 	bl	8000890 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001246:	f7ff fb23 	bl	8000890 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e18d      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001258:	4b9c      	ldr	r3, [pc, #624]	; (80014cc <HAL_RCC_OscConfig+0x57c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d108      	bne.n	800127e <HAL_RCC_OscConfig+0x32e>
 800126c:	4b96      	ldr	r3, [pc, #600]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 800126e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001272:	4a95      	ldr	r2, [pc, #596]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800127c:	e024      	b.n	80012c8 <HAL_RCC_OscConfig+0x378>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b05      	cmp	r3, #5
 8001284:	d110      	bne.n	80012a8 <HAL_RCC_OscConfig+0x358>
 8001286:	4b90      	ldr	r3, [pc, #576]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 8001288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800128c:	4a8e      	ldr	r2, [pc, #568]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001296:	4b8c      	ldr	r3, [pc, #560]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 8001298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800129c:	4a8a      	ldr	r2, [pc, #552]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012a6:	e00f      	b.n	80012c8 <HAL_RCC_OscConfig+0x378>
 80012a8:	4b87      	ldr	r3, [pc, #540]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 80012aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ae:	4a86      	ldr	r2, [pc, #536]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 80012b0:	f023 0301 	bic.w	r3, r3, #1
 80012b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012b8:	4b83      	ldr	r3, [pc, #524]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 80012ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012be:	4a82      	ldr	r2, [pc, #520]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 80012c0:	f023 0304 	bic.w	r3, r3, #4
 80012c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d016      	beq.n	80012fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d0:	f7ff fade 	bl	8000890 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012d6:	e00a      	b.n	80012ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d8:	f7ff fada 	bl	8000890 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e142      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ee:	4b76      	ldr	r3, [pc, #472]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 80012f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0ed      	beq.n	80012d8 <HAL_RCC_OscConfig+0x388>
 80012fc:	e015      	b.n	800132a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fe:	f7ff fac7 	bl	8000890 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001304:	e00a      	b.n	800131c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001306:	f7ff fac3 	bl	8000890 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	f241 3288 	movw	r2, #5000	; 0x1388
 8001314:	4293      	cmp	r3, r2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e12b      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800131c:	4b6a      	ldr	r3, [pc, #424]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 800131e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1ed      	bne.n	8001306 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800132a:	7ffb      	ldrb	r3, [r7, #31]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d105      	bne.n	800133c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001330:	4b65      	ldr	r3, [pc, #404]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 8001332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001334:	4a64      	ldr	r2, [pc, #400]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 8001336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800133a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0320 	and.w	r3, r3, #32
 8001344:	2b00      	cmp	r3, #0
 8001346:	d03c      	beq.n	80013c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d01c      	beq.n	800138a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001350:	4b5d      	ldr	r3, [pc, #372]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 8001352:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001356:	4a5c      	ldr	r2, [pc, #368]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001360:	f7ff fa96 	bl	8000890 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001368:	f7ff fa92 	bl	8000890 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e0fc      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800137a:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 800137c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0ef      	beq.n	8001368 <HAL_RCC_OscConfig+0x418>
 8001388:	e01b      	b.n	80013c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800138a:	4b4f      	ldr	r3, [pc, #316]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 800138c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001390:	4a4d      	ldr	r2, [pc, #308]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 8001392:	f023 0301 	bic.w	r3, r3, #1
 8001396:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139a:	f7ff fa79 	bl	8000890 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013a2:	f7ff fa75 	bl	8000890 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e0df      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 80013b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1ef      	bne.n	80013a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 80d3 	beq.w	8001572 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013cc:	4b3e      	ldr	r3, [pc, #248]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	2b0c      	cmp	r3, #12
 80013d6:	f000 808d 	beq.w	80014f4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d15a      	bne.n	8001498 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a38      	ldr	r2, [pc, #224]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 80013e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ee:	f7ff fa4f 	bl	8000890 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff fa4b 	bl	8000890 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e0b5      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001414:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <HAL_RCC_OscConfig+0x580>)
 800141a:	4013      	ands	r3, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6a11      	ldr	r1, [r2, #32]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001424:	3a01      	subs	r2, #1
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	4311      	orrs	r1, r2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800142e:	0212      	lsls	r2, r2, #8
 8001430:	4311      	orrs	r1, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001436:	0852      	lsrs	r2, r2, #1
 8001438:	3a01      	subs	r2, #1
 800143a:	0552      	lsls	r2, r2, #21
 800143c:	4311      	orrs	r1, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001442:	0852      	lsrs	r2, r2, #1
 8001444:	3a01      	subs	r2, #1
 8001446:	0652      	lsls	r2, r2, #25
 8001448:	4311      	orrs	r1, r2
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800144e:	06d2      	lsls	r2, r2, #27
 8001450:	430a      	orrs	r2, r1
 8001452:	491d      	ldr	r1, [pc, #116]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 8001454:	4313      	orrs	r3, r2
 8001456:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a1a      	ldr	r2, [pc, #104]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 800145e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001462:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 800146a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800146e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fa0e 	bl	8000890 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff fa0a 	bl	8000890 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e074      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x528>
 8001496:	e06c      	b.n	8001572 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 800149e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 80014aa:	f023 0303 	bic.w	r3, r3, #3
 80014ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_RCC_OscConfig+0x578>)
 80014b6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff f9e6 	bl	8000890 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c6:	e00e      	b.n	80014e6 <HAL_RCC_OscConfig+0x596>
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40007000 	.word	0x40007000
 80014d0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff f9dc 	bl	8000890 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e046      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <HAL_RCC_OscConfig+0x62c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x584>
 80014f2:	e03e      	b.n	8001572 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e039      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <HAL_RCC_OscConfig+0x62c>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f003 0203 	and.w	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	429a      	cmp	r2, r3
 8001512:	d12c      	bne.n	800156e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	3b01      	subs	r3, #1
 8001520:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	429a      	cmp	r2, r3
 8001524:	d123      	bne.n	800156e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001532:	429a      	cmp	r2, r3
 8001534:	d11b      	bne.n	800156e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001540:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001542:	429a      	cmp	r2, r3
 8001544:	d113      	bne.n	800156e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	085b      	lsrs	r3, r3, #1
 8001552:	3b01      	subs	r3, #1
 8001554:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001556:	429a      	cmp	r2, r3
 8001558:	d109      	bne.n	800156e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	3b01      	subs	r3, #1
 8001568:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800156a:	429a      	cmp	r2, r3
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e11e      	b.n	80017d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4b91      	ldr	r3, [pc, #580]	; (80017e0 <HAL_RCC_ClockConfig+0x260>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d910      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b8e      	ldr	r3, [pc, #568]	; (80017e0 <HAL_RCC_ClockConfig+0x260>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 020f 	bic.w	r2, r3, #15
 80015ae:	498c      	ldr	r1, [pc, #560]	; (80017e0 <HAL_RCC_ClockConfig+0x260>)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b8a      	ldr	r3, [pc, #552]	; (80017e0 <HAL_RCC_ClockConfig+0x260>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e106      	b.n	80017d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d073      	beq.n	80016bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d129      	bne.n	8001630 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015dc:	4b81      	ldr	r3, [pc, #516]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0f4      	b.n	80017d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80015ec:	f000 f966 	bl	80018bc <RCC_GetSysClockFreqFromPLLSource>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4a7c      	ldr	r2, [pc, #496]	; (80017e8 <HAL_RCC_ClockConfig+0x268>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d93f      	bls.n	800167a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015fa:	4b7a      	ldr	r3, [pc, #488]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d009      	beq.n	800161a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800160e:	2b00      	cmp	r3, #0
 8001610:	d033      	beq.n	800167a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001616:	2b00      	cmp	r3, #0
 8001618:	d12f      	bne.n	800167a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800161a:	4b72      	ldr	r3, [pc, #456]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001622:	4a70      	ldr	r2, [pc, #448]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001628:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e024      	b.n	800167a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d107      	bne.n	8001648 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001638:	4b6a      	ldr	r3, [pc, #424]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d109      	bne.n	8001658 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0c6      	b.n	80017d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001648:	4b66      	ldr	r3, [pc, #408]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0be      	b.n	80017d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001658:	f000 f8ce 	bl	80017f8 <HAL_RCC_GetSysClockFreq>
 800165c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4a61      	ldr	r2, [pc, #388]	; (80017e8 <HAL_RCC_ClockConfig+0x268>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d909      	bls.n	800167a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001666:	4b5f      	ldr	r3, [pc, #380]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800166e:	4a5d      	ldr	r2, [pc, #372]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 8001670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001674:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800167a:	4b5a      	ldr	r3, [pc, #360]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f023 0203 	bic.w	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4957      	ldr	r1, [pc, #348]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 8001688:	4313      	orrs	r3, r2
 800168a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800168c:	f7ff f900 	bl	8000890 <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	e00a      	b.n	80016aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001694:	f7ff f8fc 	bl	8000890 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e095      	b.n	80017d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	4b4e      	ldr	r3, [pc, #312]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 020c 	and.w	r2, r3, #12
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d1eb      	bne.n	8001694 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d023      	beq.n	8001710 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d4:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4a42      	ldr	r2, [pc, #264]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80016da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80016ec:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80016f4:	4a3b      	ldr	r2, [pc, #236]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80016f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016fc:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4936      	ldr	r1, [pc, #216]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
 800170e:	e008      	b.n	8001722 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2b80      	cmp	r3, #128	; 0x80
 8001714:	d105      	bne.n	8001722 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	4a32      	ldr	r2, [pc, #200]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 800171c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001720:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001722:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <HAL_RCC_ClockConfig+0x260>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d21d      	bcs.n	800176c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001730:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <HAL_RCC_ClockConfig+0x260>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f023 020f 	bic.w	r2, r3, #15
 8001738:	4929      	ldr	r1, [pc, #164]	; (80017e0 <HAL_RCC_ClockConfig+0x260>)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001740:	f7ff f8a6 	bl	8000890 <HAL_GetTick>
 8001744:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001746:	e00a      	b.n	800175e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001748:	f7ff f8a2 	bl	8000890 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	; 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e03b      	b.n	80017d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_RCC_ClockConfig+0x260>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d1ed      	bne.n	8001748 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4917      	ldr	r1, [pc, #92]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	490f      	ldr	r1, [pc, #60]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017aa:	f000 f825 	bl	80017f8 <HAL_RCC_GetSysClockFreq>
 80017ae:	4602      	mov	r2, r0
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HAL_RCC_ClockConfig+0x264>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	490c      	ldr	r1, [pc, #48]	; (80017ec <HAL_RCC_ClockConfig+0x26c>)
 80017bc:	5ccb      	ldrb	r3, [r1, r3]
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	fa22 f303 	lsr.w	r3, r2, r3
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <HAL_RCC_ClockConfig+0x270>)
 80017c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_RCC_ClockConfig+0x274>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff f812 	bl	80007f8 <HAL_InitTick>
 80017d4:	4603      	mov	r3, r0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40022000 	.word	0x40022000
 80017e4:	40021000 	.word	0x40021000
 80017e8:	04c4b400 	.word	0x04c4b400
 80017ec:	080019b8 	.word	0x080019b8
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000004 	.word	0x20000004

080017f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80017fe:	4b2c      	ldr	r3, [pc, #176]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b04      	cmp	r3, #4
 8001808:	d102      	bne.n	8001810 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	e047      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b08      	cmp	r3, #8
 800181a:	d102      	bne.n	8001822 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800181c:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	e03e      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001822:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b0c      	cmp	r3, #12
 800182c:	d136      	bne.n	800189c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3301      	adds	r3, #1
 8001844:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d10c      	bne.n	8001866 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800184c:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001856:	68d2      	ldr	r2, [r2, #12]
 8001858:	0a12      	lsrs	r2, r2, #8
 800185a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800185e:	fb02 f303 	mul.w	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
      break;
 8001864:	e00c      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001866:	4a13      	ldr	r2, [pc, #76]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4a10      	ldr	r2, [pc, #64]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001870:	68d2      	ldr	r2, [r2, #12]
 8001872:	0a12      	lsrs	r2, r2, #8
 8001874:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
      break;
 800187e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0e5b      	lsrs	r3, r3, #25
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	3301      	adds	r3, #1
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	fbb2 f3f3 	udiv	r3, r2, r3
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	e001      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80018a0:	693b      	ldr	r3, [r7, #16]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	00f42400 	.word	0x00f42400
 80018b8:	007a1200 	.word	0x007a1200

080018bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3301      	adds	r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d10c      	bne.n	80018fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018e0:	4a17      	ldr	r2, [pc, #92]	; (8001940 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018ea:	68d2      	ldr	r2, [r2, #12]
 80018ec:	0a12      	lsrs	r2, r2, #8
 80018ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	617b      	str	r3, [r7, #20]
    break;
 80018f8:	e00c      	b.n	8001914 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	4a0e      	ldr	r2, [pc, #56]	; (800193c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001904:	68d2      	ldr	r2, [r2, #12]
 8001906:	0a12      	lsrs	r2, r2, #8
 8001908:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	617b      	str	r3, [r7, #20]
    break;
 8001912:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0e5b      	lsrs	r3, r3, #25
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	3301      	adds	r3, #1
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	fbb2 f3f3 	udiv	r3, r2, r3
 800192c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800192e:	687b      	ldr	r3, [r7, #4]
}
 8001930:	4618      	mov	r0, r3
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40021000 	.word	0x40021000
 8001940:	007a1200 	.word	0x007a1200
 8001944:	00f42400 	.word	0x00f42400

08001948 <__libc_init_array>:
 8001948:	b570      	push	{r4, r5, r6, lr}
 800194a:	4d0d      	ldr	r5, [pc, #52]	; (8001980 <__libc_init_array+0x38>)
 800194c:	4c0d      	ldr	r4, [pc, #52]	; (8001984 <__libc_init_array+0x3c>)
 800194e:	1b64      	subs	r4, r4, r5
 8001950:	10a4      	asrs	r4, r4, #2
 8001952:	2600      	movs	r6, #0
 8001954:	42a6      	cmp	r6, r4
 8001956:	d109      	bne.n	800196c <__libc_init_array+0x24>
 8001958:	4d0b      	ldr	r5, [pc, #44]	; (8001988 <__libc_init_array+0x40>)
 800195a:	4c0c      	ldr	r4, [pc, #48]	; (800198c <__libc_init_array+0x44>)
 800195c:	f000 f820 	bl	80019a0 <_init>
 8001960:	1b64      	subs	r4, r4, r5
 8001962:	10a4      	asrs	r4, r4, #2
 8001964:	2600      	movs	r6, #0
 8001966:	42a6      	cmp	r6, r4
 8001968:	d105      	bne.n	8001976 <__libc_init_array+0x2e>
 800196a:	bd70      	pop	{r4, r5, r6, pc}
 800196c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001970:	4798      	blx	r3
 8001972:	3601      	adds	r6, #1
 8001974:	e7ee      	b.n	8001954 <__libc_init_array+0xc>
 8001976:	f855 3b04 	ldr.w	r3, [r5], #4
 800197a:	4798      	blx	r3
 800197c:	3601      	adds	r6, #1
 800197e:	e7f2      	b.n	8001966 <__libc_init_array+0x1e>
 8001980:	080019c8 	.word	0x080019c8
 8001984:	080019c8 	.word	0x080019c8
 8001988:	080019c8 	.word	0x080019c8
 800198c:	080019cc 	.word	0x080019cc

08001990 <memset>:
 8001990:	4402      	add	r2, r0
 8001992:	4603      	mov	r3, r0
 8001994:	4293      	cmp	r3, r2
 8001996:	d100      	bne.n	800199a <memset+0xa>
 8001998:	4770      	bx	lr
 800199a:	f803 1b01 	strb.w	r1, [r3], #1
 800199e:	e7f9      	b.n	8001994 <memset+0x4>

080019a0 <_init>:
 80019a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a2:	bf00      	nop
 80019a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019a6:	bc08      	pop	{r3}
 80019a8:	469e      	mov	lr, r3
 80019aa:	4770      	bx	lr

080019ac <_fini>:
 80019ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ae:	bf00      	nop
 80019b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019b2:	bc08      	pop	{r3}
 80019b4:	469e      	mov	lr, r3
 80019b6:	4770      	bx	lr
